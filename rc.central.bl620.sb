// Sbrick controller

//================================================================================
// SIO pin locations
//================================================================================
// Switches
#define SWITCH_WAKEUP 0
#define SWITCH_DIR_LX 30
#define SWITCH_DIR_LY 29
#define SWITCH_DIR_RX 28
#define SWITCH_DIR_RY 25
// Analogue inputs
#define ADC_V_BATT 1
#define ADC_LX 2
#define ADC_LY 3
#define ADC_RX 4
#define ADC_RY 5
// LED
#define LED_PIN 6
// Keep alive
#define SYS_ON 8


DIM rc,at$,conHndl,uHndl,atHndl
DIM pwm
DIM connected 

//==============================================================================
// Initialise and instantiate service, characteristic, start adverts
//==============================================================================
FUNCTION OnStartup()
    dim adr$
    adr$ = "\00\00\07\80\2E\2C\CD"
  rc=BleConnect(adr$,4000,90000,120000,2000000)
  //open the gatt client with default notify/indicate ring buffer size
  IF rc==0 THEN : rc = BleGattcOpen(0,0) : ENDIF
ENDFUNC rc



//==============================================================================
// Ble event handler
//==============================================================================
FUNCTION HndlrBleMsg(BYVAL nMsgId, BYVAL nCtx)
    DIM uHndA
    conHndl=nCtx
    IF nMsgID==1 THEN
        PRINT "\n\n- Disconnected"
        connected = 0
        EXITFUNC 0
    ELSEIF nMsgID==0 THEN
        PRINT "\n- Connected, so write to attribute handle 26"
        connected = 1
        atHndl = 26
        at$="\00\00"
        rc=BleGattcWrite(conHndl,atHndl,at$)
        IF rc==0 THEN
            WAITEVENT
        ENDIF
    ENDIF
ENDFUNC 1

//==============================================================================
// Call back from writing a characteristic.
//==============================================================================
function HandlerAttrWrite(cHndl,aHndl,nSts) as integer
    dim nOfst,nAhndl,at$
    print "\nEVATTRWRITE "
    if nSts == 0 then
      print "\nAttribute write OK"
    else
        print "\nFailed to write attribute"
    endif
ENDFUNC 1

FUNCTION HndlrConnTO()
    PRINT "\n--- Connection timeout"
ENDFUNC 0


//==============================================================================
// Call back from timer 0
//==============================================================================
FUNCTION HandlerTimer0()
    PRINT "\nTimer 0 has expired"
    if pwm == 0 then
        at$="\01\00\00\FF\01\00\FF\02\00\FF\03\00\FF\04\00\FF"
        pwm = 1
    else
        at$="\01\00\00\00\01\00\00\02\00\00\03\00\00\04\00\00" 
        pwm = 0
    endif
    atHndl = 26
    rc=BleGattcWrite(conHndl,atHndl,at$)
    if connected == 1 then
        TimerStart(0,400,1)
        rc = 1
        WAITEVENT
    else
        rc = 0
    endif
ENDFUNC rc

//==============================================================================
// Main() equivalent
//==============================================================================
ONEVENT  EVBLEMSG           CALL HndlrBleMsg
OnEvent  EVATTRWRITE        call HandlerAttrWrite
ONEVENT EVBLE_CONN_TIMEOUT CALL HndlrConnTO
ONEVENT EVTMR0 CALL HandlerTimer0

// Keep us alive
rc = GpioSetFunc(SYS_ON,2,1)
gpiowrite(SYS_ON, 1)

// Turn on the LED for a bit
rc = GpioSetFunc(LED_PIN,2,0)
gpiowrite(LED_PIN, 0)

// Configure the analogue inputs
rc = GpioSetFunc(ADC_V_BATT, 3, 0)
rc = GpioSetFunc(ADC_LX, 3, 0)
rc = GpioSetFunc(ADC_LY, 3, 0)
rc = GpioSetFunc(ADC_RX, 3, 0)
rc = GpioSetFunc(ADC_RY, 3, 0)

// Wakeup pin (Input with pull up + wakeup from deep sleep)
rc = GpioSetFunc(SWITCH_WAKEUP,1,0x12)

// Configure the other buttons (input with pull up)
rc = GpioSetFunc(SWITCH_DIR_LX,1,2)
rc = GpioSetFunc(SWITCH_DIR_LY,1,2)
rc = GpioSetFunc(SWITCH_DIR_RX,1,2)
rc = GpioSetFunc(SWITCH_DIR_RY,1,2)

// Init global variables
pwm = 0
connected = 1
IF OnStartup()==0 THEN
    PRINT "\nGatt Client is open\n"
ELSE
    PRINT "\nFailure OnStartup"
ENDIF
TimerStart(0,500,1)
WAITEVENT
PRINT "\nExiting..."
